#+title: intro
#+author: gabriel

The shell, a fundamental part of Linux operating systems, allows users to manage their systems through the terminal on various distributions such as Ubuntu, Debian, CentoOS, SUSE...

** Kernel ->
The kernel is like the brain of a computer; it resides at the heart of the operating system and is responsible for managing all activities within the system.

 The kernel manages a set of critical resources that are the building blocks of the Linux operating system:

- Organization and accessibility of files,
- Initialization, management, and termination of processes,
- Handling of input and output operations,
- Efficient use of memory,
- Communication between various devices.

  Like an orchestra conductor, these tasks ensure the system works in harmony and that the computer performs many complex functions in an organized manner.

** Shell ->
  The shell is an important tool that allows a user to interact with the operating system. It serves as a bridge between you and the computer's kernel, understanding your language and converting your instructions into a format the computer can understand.

   Commands entered from the keyboard or instructions taken from files are made comprehensible to the operating system through the shell.

   It automatically comes into action when a user opens a terminal or logs into their computer.

[[./imgs/kr.png]]

*** Command-Line Shell
This type of shell allows users to interact with the operating system using text-based commands. Commands are entered via the keyboard and enable the execution of various tasks and operations.

Commands are given through a "Terminal" application on Linux or macOS, and through the "Command Prompt" on Windows. Users can list files (ls), view file contents (cat), and perform many other tasks

**** Terminal
The terminal opens a window to use the shell in your computer's operating system and is a powerful program that allows direct dialogue with the system.

Essentially, it enables users to enter written commands and see the results of these commands through a text-based interface.

The difference between a terminal and a shell; the shell is the background engine that processes commands, while the terminal is the interface that allows you to interact with this engine.

** Shell Scripting
Shell scripts are sequences of shell commands collected in a file and executed with a single command. This is particularly useful for automating repetitive tasks and simplifying processes.

Instead of writing the same command sequence repeatedly, you can easily manage the entire process with a shell script.

Shell scripts have a structure similar to other programming languages and include the following elements:

- Shell Keywords: Includes structures like if, else, break.
- Shell Commands: Uses basic Unix/Linux commands like cd, ls, echo, pwd, touch.
- Functions: Groups repeated code blocks functionally.
- Control Flow Structures: Includes structures like if..then..else, case, and loops.

#+begin_src sh simple example
#!/bin/bash

# comment

echo "Hello, World!"
#+end_src

*#!/bin/bash* ->
This is the shebang line. It specifies which shell interpreter should be used to run the script. It tells the system that this script should be executed with bash.

*# comment* ->
This line is a comment, and comment lines start with the # symbol. Comments are ignored by the bash interpreter and are used to explain what the script or code does.

*** Multi-Line comments
In some cases, your explanation may need to span multiple lines. Multi-line comments are used for such situations. In shell scripting, multi-line comments start with : ' and end with '.

#+begin_src sh
: '
This is a multi-line comment
Each line will be treated as a comment
'
#+end_src

*** Variables
In shell scripting, we use variable structures to store and manage data. Unlike some programming languages, you do not need to specify the type of a variable before using it

*System-Defined Variables* ->
These variables are defined by the system itself and are usually written in uppercase letters. They are also known as environment variables and contain important information about the system.

 For example, you can view all available environment variables using the ~printenv~ command.

*User-Defined variables* ->
These variables are created by the user writing the script and only exist for the duration the code is executed.

To define a variable, write the variable name and assign it a value using the = sign. To access a variable, prefix the variable name with the $ sign.

#+begin_src sh
#!/bin/bash

# Accessing an Environment Variable
echo $PATH

# Defining a variable
name="Alex"
number=19

echo $name
echo "Number: $number"
#+end_src

When writing scripts, you may often need to compare the values of variables. Basic comparison operators you can use in shell scripting:


*Integer Comparison* ->
| Operator | Description
| -eq | Checks if two variables are equal.
| -ne | Checks if two variables are not equal.
| -gt | Checks if the variable on the left is greater than the variable on the right.
| -ge | Checks if the variable on the left is greater than or equal to the variable on the right.
| -lt | Checks if the variable on the left is less than the variable on the right.
| -le | Checks if the variable on the left is less than or equal to the variable on the right.

*String Comparison* ->
| Operator | Description
| == | Checks if two strings are equal.
| != | Checks if two strings are not equal.
| < | Checks if one string is less than another string in alphabetical order.
| > | Checks if one string is greater than another string in alphabetical order.

Remember that when using < and > operators, these characters may be specially recognized by the shell. Therefore, when used within the [ ] structure, they should be prefixed with the escape character \.

*** Conditional Statements
Conditional statements allow you to execute specific code blocks if certain conditions are met. Shell scripting supports such conditional statements and allows you to check conditions through comparison operators.

*IF* ->
#+begin_src sh
#!/bin/bash

a=10
b=10
if [ $a -eq $b ]
then
    echo "Equal"
fi
#+end_src

Note: When using conditional statements, remember to leave a space before and after the condition within the brackets [ ]. Otherwise, you may encounter an error when running the script.

*** Loops
Loops are structural commands that allow a set of commands to be executed repeatedly until a certain condition is met. Various loop structures can be used in shell scripts

*While Loop* ->
A while loop executes the specified commands as long as the condition is true. The loop ends when the condition is false.
#+begin_src sh while example
#!/bin/bash

number=1
while [ $number -lt 5 ]
do
    echo $number
    number=`expr $number + 1`
done
#+end_src

*For Loop* ->
A for loop allows a variable to iterate over a list of values or a range of values.
#+begin_src sh
#!/bin/bash

for number in 4 8 12 20 25 30
do
echo $number
done
#+end_src

** Basic Linux Commands ->
Linux terminal commands are frequently used in shell scripts. Let's take a look at some commonly used general Linux commands that we can use in scripts.

*Extracting, Sorting, and Filtering Data* ->
- grep: Searches for specific text within files. For example, grep "blue" colors.txt searches for the word blue in colors.txt and displays matching lines.

- sort: Sorts the content of a file alphabetically or numerically. For example, sort file.txt sorts the lines in file.txt alphabetically and prints them to the screen.

- wc (word count): Counts the number of lines, words, and characters in a file. For example, wc file.txt displays the line, word, and character counts of file.txt.

- cut: Extracts specific fields or columns from text files. Particularly useful for extracting specific columns or fields from a file. For example, cut -d"," -f1 file.csv extracts and displays the first column from each line in file.csv, assuming comma-separated values.

*File Permission Commands* ->
- chown [user]:[group] [file]: Changes the ownership of a file or directory. This command can change the owner and optionally the group ownership of the specified file.

- chgrp [group] [file]: Changes the group ownership of a file or directory. This command transfers the group ownership of the specified file to the new specified group.

- chmod [permissions] [file]: Changes the access permissions of files and directories. Permissions can affect the owner (user), group, and others, and control the read (r), write (w), and execute (x) rights.
